def text_validation(text: str) -> str :
    text = text.replace(',', '')
    list_keys = ['name', 'day_month', 'day_of_week', 'start_time', 'end_time', 'master', 'services']

    braces_check = lambda word: word.startswith("{") and word.endswith("}")
    keywords_in_text = list(filter(braces_check, text.split()))

    for keyword in keywords_in_text:
        if not keyword[1:-1] in list_keys:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

    return text


def count_elements(elements: list[list[str, int]]) -> list[list[str, int, int]]:
    elements = list(map(tuple, elements))
    elements_dict = {element: 0 for element in elements}

    for element in elements:
        elements_dict[element] += 1
    result = [list(element) + [count] for element, count in elements_dict.items()]

    return result


def search(tree, key):
    if key in tree:
        return tree[key]
    for value in tree.values():
        if isinstance(value, dict):
            tree = value
            return search(tree, key)


def json_diff(json_new: dict, old_json: dict, diff_list: list[str]) -> dict:
    result = {}
    path = []
    for key in diff_list:
        new_value = search(json_new, key)
        old_value = search(json_old, key)
        if not new_value == old_value:
            result[key] = new_value
    return result


Test_text = '''{name}, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞:
‚åöÔ∏è {day_month} –≤ {start_time}
üë© {master}
–£—Å–ª—É–≥–∏:
{services}
—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é {record_link}'''

task2_data = [['665587', 2], ['669532', 1], ['669537', 2], ['669532', 1], ['665587', 1]]

json = {'company_id': 111111, 'resource': 'record', 'resource_id': 406155061, 'status': 'create', 'data': {'id': 11111111, 'company_id': 111111, 'services': [{'id': 9035445, 'title': '–°—Ç—Ä–∏–∂–∫–∞', 'cost': 1500, 'cost_per_unit': 1500, 'first_cost': 1500, 'amount': 1}], 'goods_transactions': [], 'staff': {'id': 1819441, 'name': '–ú–∞—Å—Ç–µ—Ä'}, 'client': {'id': 130345867, 'name': '–ö–ª–∏–µ–Ω—Ç', 'phone': '79111111111', 'success_visits_count': 2, 'fail_visits_count': 0}, 'clients_count': 1, 'datetime': '2022-01-25T11:00:00+03:00', 'create_date': '2022-01-22T00:54:00+03:00', 'online': False, 'attendance': 0, 'confirmed': 1, 'seance_length': 3600, 'length': 3600, 'master_request': 1, 'visit_id': 346427049, 'created_user_id': 10573443, 'deleted': False, 'paid_full': 0, 'last_change_date': '2022-01-22T00:54:00+03:00', 'record_labels': '', 'date': '2022-01-22 10:00:00'}}
json_old = {'company_id': 111111, 'resource': 'record', 'resource_id': 406155061, 'status': 'create', 'data': {'id': 11111111, 'company_id': 111111, 'services': [{'id': 9035445, 'title': '–°—Ç—Ä–∏–∂–∫–∞', 'cost': 1500, 'cost_per_unit': 1500, 'first_cost': 1500, 'amount': 1}], 'goods_transactions': [], 'staff': {'id': 1819441, 'name': '–ú–∞—Å—Ç–µ—Ä'}, 'client': {'id': 130345867, 'name': '–ö–ª–∏–µ–Ω—Ç', 'phone': '79111111111', 'success_visits_count': 2, 'fail_visits_count': 0}, 'clients_count': 1, 'datetime': '2022-01-25T11:00:00+03:00', 'create_date': '2022-01-22T00:54:00+03:00', 'online': False, 'attendance': 0, 'confirmed': 1, 'seance_length': 3600, 'length': 3600, 'master_request': 1, 'visit_id': 346427049, 'created_user_id': 10573443, 'deleted': False, 'paid_full': 0, 'last_change_date': '2022-01-22T00:54:00+03:00', 'record_labels': '', 'date': '2022-01-22 10:00:00'}}
json_new = {'company_id': 111111, 'resource': 'record', 'resource_id': 406155061, 'status': 'create', 'data': {'id': 11111111, 'company_id': 111111, 'services': [{'id': 22222225, 'title': '–°—Ç—Ä–∏–∂–∫–∞', 'cost': 1500, 'cost_per_unit': 1500, 'first_cost': 1500, 'amount': 1}], 'goods_transactions': [], 'staff': {'id': 1819441, 'name': '–ú–∞—Å—Ç–µ—Ä'}, 'client': {'id': 130345867, 'name': '–ö–ª–∏–µ–Ω—Ç', 'phone': '79111111111', 'success_visits_count': 2, 'fail_visits_count': 0}, 'clients_count': 1, 'datetime': '2022-01-25T13:00:00+03:00', 'create_date': '2022-01-22T00:54:00+03:00', 'online': False, 'attendance': 2, 'confirmed': 1, 'seance_length': 3600, 'length': 3600, 'master_request': 1, 'visit_id': 346427049, 'created_user_id': 10573443, 'deleted': False, 'paid_full': 1, 'last_change_date': '2022-01-22T00:54:00+03:00', 'record_labels': '', 'date': '2022-01-22 10:00:00'}}
Result = {'services': [{'id': 22222225, 'title': '–°—Ç—Ä–∏–∂–∫–∞', 'cost': 1500, 'cost_per_unit': 1500, 'first_cost': 1500, 'amount': 1}], 'datetime': '2022-01-25T13:00:00+03:00'}
diff_list = ['services', 'staff', 'datetime']


# text_validation(Test_text)
assert count_elements(task2_data) == [['665587', 2, 1], ['669532', 1, 2], ['669537', 2, 1], ['665587', 1, 1]]
assert json_diff(json_new, json_old, diff_list) == Result




"""–ó–ê–î–ê–ù–ò–ï ‚Ññ4"""

"""–ï—Å–ª–∏ —Ç–æ, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ,
—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TTL-–∏–Ω–¥–µ–∫—Å—ã.

–ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç, —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –°elery beat,
–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª—é—á —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å

–¢–∞—Å–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—É–¥–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º –∫–ª—é—á–µ–º –∏ —É–¥–∞–ª—è—Ç—å –∏—Ö, –µ—Å–ª–∏ Date.now() >= expireTime
"""



"""–ó–ê–î–ê–ù–ò–ï ‚Ññ5"""


"""
–°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–µ–º –±—É–¥—É—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π, –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –∫–ª—é—á function –∏ –≤—ã–∑—ã–≤–∞–µ–º –µ–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.

functions = {}

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤
def register_function(function_name, function):
    webhook_functions[function_name] = function

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±-—Ö—É–∫–æ–≤
@app.route('/Datalore', methods=['POST'])
def handle_webhook():
    data = request.get_json()
    function_name = data.get('function')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if function_name in webhook_functions:
        result = webhook_functions[function_name](data)
        return jsonify({'result': result}), 200
    else:
        return jsonify({'error': '–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
"""





